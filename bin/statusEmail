#!/usr/bin/env python

# import time
from datetime import datetime
from datetime import timedelta

import smtplib
from email.mime.text import MIMEText
from astropy.time import Time
import numpy as np

from sdssdb.peewee.sdss5db import opsdb, targetdb
from kronos import rs_version, observatory

if observatory == "LCO":
    r_camera = "r2"
    b_camera = "b2"
else:
    r_camera = "r1"
    b_camera = "b1"

dbVersion = targetdb.Version.get(plan=rs_version)

Design = targetdb.Design
Conf = opsdb.Configuration
Exp = opsdb.Exposure
Field = targetdb.Field
d2f = targetdb.DesignToField
Cadence = targetdb.Cadence
d2s = opsdb.DesignToStatus
CompStatus = opsdb.CompletionStatus


def sendEmail(msgBody, recipients):
    """Send an email.

    Input:
    -msgBody: string
    -recipients: list
    """

    # Adds the time to the text
    # time = time.strftime('%Y-%m-%d ', time.gmtime()) + '\n'

    if observatory == "LCO":
        sender = "sdss-alerts@lco.cl"
        client = "139.229.97.11"
    else:
        sender = "kronos@apo.nmsu.edu"
        client = "mail.apo.nmsu.edu"

    msg = MIMEText(msgBody)

    now = Time.now()
    now.format = "mjd"
    mjd_last_night_hopefully = int(np.floor(now.value))

    msg['Subject'] = f"{observatory} Kronos summary {mjd_last_night_hopefully}"

    msg['From'] = sender

    msg['Reply-to'] = sender

    msg['To'] = ', '.join(recipients)

    # Send mail through the mail server
    try:
        s = smtplib.SMTP()
        s.connect(client)
        # Send the email - real from, real to, extra headers and content ...
        s.sendmail(sender, recipients, msg.as_string())
        print(f"Sent email")
    except Exception as e:
        print(f"Sending email warning: {e}")
    finally:
        s.close()


def scrapeLog():
    logFile = "/data/logs/completionStatus/current.log"

    with open(logFile, "r") as log:
        lines = log.readlines()

    selected = ""
    for line in lines:
        if "mark" in line:
            selected += line

    return selected


def queryDB():
    start = datetime.now()
    useTime = start - timedelta(hours=24)
    last_night = Conf.select(Conf.design_id)\
                     .join(Exp)\
                     .where(Exp.start_time > useTime,
                            Conf.design_id != None)

    design_ids = np.unique([l.design_id for l in last_night])

    last_night = Conf.select(Conf.design_id, CompStatus.label.alias("status"),
                             d2f.exposure, Cadence.label.alias("cadence"),
                             d2s.mjd, d2s.manual, Field.field_id)\
                     .join(d2f, on=(d2f.design == Conf.design_id))\
                     .join(Field)\
                     .join(Cadence)\
                     .switch(d2f)\
                     .join(d2s, on=(d2s.design_id == d2f.design_id))\
                     .join(CompStatus)\
                     .where(Conf.design_id << list(design_ids),
                            Field.version == dbVersion)\
                     .order_by(d2s.mjd).dicts()

    summary = f"{'field_id':10s}, {'design_id':10s}, {'status':10s} \n"
    for des in last_night:
        epochs = Conf.select(Conf.epoch)\
                     .where(Conf.design_id == des['design'])
        mjds = [f"{e.epoch - 2400000.5:8.2f}" for e in epochs]
        status = des['status']
        if des["mjd"] is None:
            des["mjd"] = 99999.9
        if des["manual"]:
            manual = "!!manual!!"
        else:
            manual = ""
        formatted = manual + f"{des['field_id']:10d}, {des['design']:10d}: {des['status']:10s} {des['cadence']} {des['mjd']:8.2f}\n"
        if len(mjds) > 1:
            formatted += f"        hist: "
            formatted += ", ".join(mjds) + "\n"
        summary += formatted

    return summary


if __name__ == "__main__":
    # print(queryDB())
    # print(scrapeLog())

    msgBody = queryDB() + "\n" + scrapeLog()

    sendEmail(msgBody, ["j.donor@tcu.edu"])
