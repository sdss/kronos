#!/usr/bin/env python

from collections import defaultdict
from datetime import datetime
from datetime import timedelta
import os
import sys
import argparse

import numpy as np
from peewee import fn, JOIN
from astropy.time import Time

from sdssdb.peewee.sdss5db import opsdb, targetdb

from kronos import rs_version, observatory
from kronos.designCompletion import checker

if observatory == "LCO":
    r_camera = "r2"
    b_camera = "b2"
else:
    r_camera = "r1"
    b_camera = "b1"


r1_db = opsdb.Camera.get(label=r_camera).pk
b1_db = opsdb.Camera.get(label=b_camera).pk
ap_db = opsdb.Camera.get(label="APOGEE").pk
Design = targetdb.Design
Conf = opsdb.Configuration
Exp = opsdb.Exposure
Field = targetdb.Field
d2f = targetdb.DesignToField
Cadence = targetdb.Cadence
DesignToStatus = opsdb.DesignToStatus
CompletionStatus = opsdb.CompletionStatus
Quickred = opsdb.Quickred
CameraFrame = opsdb.CameraFrame
Camera = opsdb.Camera
Queue = opsdb.Queue


def brightCollate(expDicts):
    sn2 = np.array([e["sn2"] for e in expDicts if e["pk"] == ap_db and e["sn2"] >= 100])
    if len(sn2) == 0:
        return 0
    times = np.array([datetime.timestamp(e["start_time"]) for e in expDicts if e["pk"] == ap_db and e["sn2"] >= 100])
    pos = np.array([e["dither_pixpos"] for e in expDicts if e["pk"] == ap_db and e["sn2"] >= 100])
    a_val = np.min(pos)
    a = np.abs(pos - a_val) < 0.2
    b = ~a
    atimes = times[a]
    btimes = times[b]
    sn2a = sn2[a]
    sn2b = sn2[b]

    aMatch = list()
    bMatch = list()
    for i, t in enumerate(atimes):
        diff = [abs(t - bt) for bt in btimes]
        matched = np.where(np.array(diff) < 7200)
        if len(matched[0] > 0):
            aMatch.append(i)
            # matched are indices into btimes/sn2b now
            for j in matched[0]:
                if j not in bMatch:
                    bMatch.append(j)

    goodA = np.sum([sn2a[i] for i in aMatch])
    goodB = np.sum([sn2b[i] for i in bMatch])

    return goodA + goodB


def darkCollate(exps):
    # we joined to camera to get camera pk
    camera_pk = [e["pk"] for e in exps]
    sn2 = [e["sn2"] for e in exps]

    r = 0
    b = 0

    for c, s in zip(camera_pk, sn2):
        if s > 0.2:
            if c == r1_db:
                r += s
            elif c == b1_db:
                b += s

    return r, b


def checkDone(hours=1, test=False, daemon=False, report=False, partial=False):
    start = datetime.now()

    if report:
        test = True
        if hours < 24:
            hours = 24

    useTime = start - timedelta(hours=hours)
    db_flavor = opsdb.ExposureFlavor.get(pk=1)  # science
    doneStatus = CompletionStatus.get(label="done").pk
    db_version = targetdb.Version.get(plan=rs_version)

    mostRecent = Exp.select(fn.MAX(Exp.start_time))\
                    .where(Exp.exposure_flavor == db_flavor)\
                    .scalar()

    if (start - mostRecent).seconds > 1800 and daemon:
        # no exposures in the last 30 minutes, don't do anything.
        # has to be 30 min b/c apogee creates exposure entry at the beginning of exposure
        # so could be 15-20 min, better safe probably?
        return

    recent_designs = Design.select(Design.design_id, d2f.exposure,
                                   Cadence.nexp, Cadence.obsmode_pk,
                                   Cadence.max_length, Field.pk.alias("field_pk"),
                                   Field.field_id, fn.MAX(Exp.start_time))\
                           .join(Conf, on=(Design.design_id == Conf.design_id))\
                           .join(Exp)\
                           .switch(Design)\
                           .join(DesignToStatus, on=(Design.design_id == DesignToStatus.design_id))\
                           .switch(Design)\
                           .join(d2f)\
                           .join(Field)\
                           .join(Cadence, on=(Field.cadence_pk == Cadence.pk))\
                           .where(Exp.start_time > useTime,
                                  Exp.exposure_flavor == db_flavor,
                                  Field.version_pk == db_version)\
                           .group_by(Design.design_id, d2f.exposure,
                                     Cadence.nexp, Cadence.obsmode_pk,
                                     Cadence.max_length, Field.pk)
    if not report and not partial:
        recent_designs = recent_designs.where(DesignToStatus.status != doneStatus)

    print(start.strftime("%Y-%m-%dT%H:%M:%S"), recent_designs.count())

    r1 = defaultdict(float)
    r1_epoch = defaultdict(float)
    b1 = defaultdict(float)
    b1_epoch = defaultdict(float)
    apsn2 = defaultdict(list)
    modes = dict()
    lastInEpoch = dict()
    expInEpoch = dict()
    design_to_field = dict()
    design_to_field_pk = dict()
    exp_idxs = dict()
    max_times = dict()
    for d in recent_designs.dicts():
        design_to_field[d["design_id"]] = d["field_id"]
        design_to_field_pk[d["design_id"]] = d["field_pk"]
        max_times[d["design_id"]] = d["max"]
        if d["obsmode_pk"] is None:
            continue
        # nexp is cadence nexp, an array
        expCount = [np.sum(d["nexp"][:i+1]) for i in range(len(d["nexp"]))]
        # exposure is 0 indexed, so the first exposure of an epoch will
        # have exposure number equal to the sum of previous epochs
        # so design.exposure will be > sum(previous epochs) for all
        # designs in an epoch
        current_epoch = np.where(np.array(expCount) > d["exposure"])[0][0]
        # .strip() because there is random white space for some cadences
        modes[d["design_id"]] = d["obsmode_pk"][current_epoch].strip()
        bright = "bright" in modes[d["design_id"]]
        epochMaxLength = d["max_length"][current_epoch]
        if epochMaxLength < 0.1:
            epochMaxLength = 0.1
        # max is the max start time for all exps on the design
        maxLength = d["max"] - timedelta(days=epochMaxLength)
        lastInEpoch[d["design_id"]] = d["exposure"] == expCount[current_epoch] - 1
        if current_epoch == 0:
            beginExp = 0
        else:
            beginExp = expCount[current_epoch - 1]
        # use sum for start of next epoch, will be last exposure + 1
        expInEpoch[d["design_id"]] = expCount[current_epoch] - beginExp
        exp_idxs[d["design_id"]] = [beginExp + i for i in range(expInEpoch[d["design_id"]])]
        if not bright:  # and d["exposure"] >= expCount[current_epoch] - 2
            # not bright because at the moment we treat all bright designs individually
            epoch_exps = Exp.select(Camera.pk, CameraFrame.sn2)\
                            .join(Conf)\
                            .join(Design)\
                            .join(d2f)\
                            .switch(Exp)\
                            .join(CameraFrame)\
                            .join(Camera)\
                            .where(d2f.field_pk == d["field_pk"],  # we got field.pk earlier
                                   d2f.exposure >= beginExp,
                                   d2f.exposure <= d["exposure"],
                                   Exp.start_time > maxLength)
        exps = Exp.select(Exp.start_time, Camera.pk,
                          CameraFrame.sn2, Quickred.dither_pixpos)\
                  .join(Conf)\
                  .join(Design)\
                  .switch(Exp)\
                  .join(Quickred, JOIN.LEFT_OUTER)\
                  .switch(Exp)\
                  .join(CameraFrame)\
                  .join(Camera)\
                  .where(Design.design_id == d["design_id"],
                         Exp.start_time > maxLength)
        if bright:
            apsn2[d["design_id"]] = brightCollate(exps.dicts())
        else:
            r1[d["design_id"]], b1[d["design_id"]] = darkCollate(exps.dicts())
            r1_epoch[d["design_id"]], b1_epoch[d["design_id"]] = darkCollate(epoch_exps.dicts())

    # astroT = Time(start)
    # astroT.format = "mjd"
    # mjd_now = astroT.value
    summary = ""

    b_designs = [a for a in apsn2.keys()]
    b_designs.sort()

    for a in b_designs:
        if modes[a] != "bright_time":
            continue
        done = checker[modes[a]].design(ap=apsn2[a])
        if done:
            statusString = "done"
        else:
            statusString = "started"
        fid = design_to_field[a]
        fpk = design_to_field_pk[a]
        summary += f"{fid:7d} {a:7d}: {statusString:7s} with {apsn2[a]:7.1f} {modes[a]} \n"

        astroT = Time(max_times[a])
        astroT.format = "mjd"
        mjd_now = astroT.value

        if partial and expInEpoch[a] > 2:
            done = True
            idxs = exp_idxs[a]
            done_count = Design.select(Design.design_id)\
                               .join(DesignToStatus)\
                               .switch(Design)\
                               .join(d2f)\
                               .where(d2f.exposure << idxs,
                                      d2f.field_pk == fpk,
                                      DesignToStatus.status == doneStatus)\
                               .count()

            if expInEpoch[a] - done_count == 1:
                # there's only 1 left
                last_id = Design.select(Design.design_id)\
                                .join(d2f)\
                                .where(d2f.exposure == idxs[-1],
                                       d2f.field_pk == fpk).scalar()
                if test:
                    print(f"{last_id} complete BY EPOCH")
                else:
                    summary += f"{fid:7d} {last_id:7d} done BY EPOCH \n"
                    design_status = DesignToStatus.get(design=last_id)
                    design_status.status = doneStatus
                    design_status.mjd = mjd_now
                    design_status.manual = False
                    design_status.save()

        if test:
            continue
        if done:
            status = CompletionStatus.get(label="done")
        else:
            status = CompletionStatus.get(label="started")
        design_status = DesignToStatus.get(design=a)
        design_status.status = status
        design_status.mjd = mjd_now
        design_status.manual = False
        design_status.save()

    d_designs = [r for r in r1.keys()]
    d_designs.sort()

    for r in d_designs:
        if modes[r] == "bright_time":
            continue
        # if lastInEpoch[r] and modes[r] != "dark_plane":
        if modes[r] == "dark_faint":
            N = expInEpoch[r]
        else:
            N = 1

        astroT = Time(max_times[r])
        astroT.format = "mjd"
        mjd_now = astroT.value

        epoch_done = checker[modes[r]].epoch(r=r1_epoch[r], b=b1_epoch[r],
                                             N=N, partial=partial)
        if epoch_done:
            idxs = exp_idxs[r]
            fpk = design_to_field_pk[r]
            done_query = Design.select(Design.design_id)\
                               .join(d2f)\
                               .where(d2f.exposure << idxs,
                                      d2f.field_pk == fpk).tuples()
            done_ids = [d[0] for d in done_query]
        else:
            if lastInEpoch[r] and expInEpoch[r] > 1 and modes[r] != "dark_plane":
                done = checker[modes[r]].epoch(r=r1_epoch[r], b=b1_epoch[r],
                                               N=N, partial=partial)
            else:
                done = checker[modes[r]].design(r=r1[r], b=b1[r])
            if done:
                done_ids = [r]
            else:
                done_ids = []
        if len(done_ids) > 0:
            statusString = "done"
        else:
            statusString = "started"
        fid = design_to_field[r]
        if len(done_ids) > 1:
            for d in done_ids:
                summary += f"{fid:7d} {d:7d}: {statusString:7s} with {r1[r]:4.1f}, {b1[r]:4.1f} {modes[r]} BY EPOCH \n"
        else:
            summary += f"{fid:7d} {r:7d}: {statusString:7s} with {r1[r]:4.1f}, {b1[r]:4.1f} {modes[r]} \n"
        if test:
            continue
        if len(done_ids) > 0:
            status = CompletionStatus.get(label="done")
            for d in done_ids:
                design_status = DesignToStatus.get(design=d)
                if design_status.status == status:
                    continue
                design_status.status = status
                design_status.mjd = mjd_now
                design_status.manual = False
                design_status.save()
        else:
            status = CompletionStatus.get(label="started")
            design_status = DesignToStatus.get(design=r)
            design_status.status = status
            design_status.mjd = mjd_now
            design_status.manual = False
            design_status.save()

        if epoch_done:
            inQueue = True
            while inQueue:
                fieldInQueue = Queue.select()\
                                    .where(Queue.design_id << done_ids,
                                           Queue.position > 0)\
                                    .count()
                if fieldInQueue > 0:
                    # popped = Queue.pop()
                    # print(f"design {popped} popped off queue")
                    # Dan wants designs to disappear, this should do the trick
                    Queue.delete().where(Queue.design_id << done_ids,
                                         Queue.position > 0).execute()
                    query = Queue.update(position=Queue.position - fieldInQueue)\
                                 .where(Queue.position > 0)
                    query.execute()
                else:
                    inQueue = False

    print("TOOK ", (datetime.now() - start).microseconds//1000, " ms")
    print(summary)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='checks design completion in opsdb')

    parser.add_argument('-s', '--since', type=int, default=1,
                        help='how long to look back', dest='since')
    parser.add_argument('-t', '--test', action="store_true",
                        help='only a test, no db commits')
    parser.add_argument('-d', '--daemon', action="store_true",
                        help='assume running as daemon, allow exit if no recent exps')
    parser.add_argument('-r', '--report', action="store_true",
                        help='create a report, no db changes')
    parser.add_argument('-p', '--partial', action="store_true",
                        help='allow 90% completion for dark fields')

    args = parser.parse_args()
    since = args.since
    test = args.test
    daemon = args.daemon
    report = args.report
    partial = args.partial

    if partial and since < 16:
        # longer than our longest night, but only 1 night's worth
        since = 16

    checkDone(since, test=test, daemon=daemon, report=report, partial=partial)
