#!/usr/bin/env python

from datetime import datetime

import numpy as np
from peewee import fn

from sdssdb.peewee.sdss5db import opsdb, targetdb

from kronos import rs_version
from kronos.dbConvenience import getDesignStatus

Design = targetdb.Design
Conf = opsdb.Configuration
Exp = opsdb.Exposure
Field = targetdb.Field
Cadence = targetdb.Cadence
DesignToStatus = opsdb.DesignToStatus
CompletionStatus = opsdb.CompletionStatus
d2f = targetdb.DesignToField


now = datetime.now()
doneStatus = CompletionStatus.get(label="done").pk
notStartedStatus = CompletionStatus.get(label="not started").pk
db_version = targetdb.Version.get(plan=rs_version)

# find all fields where any design is incomplete
recent_fields = Field.select(Field.pk, Cadence.nexp, Cadence.max_length)\
                     .join(d2f)\
                     .join(Design)\
                     .join(DesignToStatus)\
                     .switch(Field)\
                     .join(Cadence)\
                     .where(DesignToStatus.status != doneStatus,
                            Field.version_pk == db_version)\
                     .group_by(Field.pk, Cadence.nexp, Cadence.max_length)

for field in recent_fields.dicts():
    # get all designs with exposures
    designs = Design.select(Design.design_id, d2f.exposure,
                            DesignToStatus.completion_status_pk,
                            fn.MAX(Exp.start_time))\
                    .join(Conf)\
                    .join(Exp)\
                    .switch(Design)\
                    .join(DesignToStatus)\
                    .switch(Design)\
                    .join(d2f)\
                    .where(d2f.field_pk == field["pk"])\
                    .group_by(Design.design_id, d2f.exposure,
                              DesignToStatus.completion_status_pk).dicts()

    times = np.array([d["max"] for d in designs])
    if len(times) == 0:
        # default, nothing observed, empty query returned
        continue

    statuses = [d["status"] for d in designs]
    if len(np.unique(statuses)) == 1:
        # only one status, is it "not done?"
        if np.unique(statuses) == int(notStartedStatus):
            # if we're here, there are exposures on the design
            # but it isn't enough to call it done, so we can ignore it
            continue

    exposures = np.array([d["exposure"] for d in designs])

    order_check = False
    for e in exposures:
        # commissioning or engineering weirdness, just handle it
        if 1 not in e - exposures and e != 0:
            order_check = True

    design_ids = np.array([d["design_id"] for d in designs])

    if order_check:
        if np.min(design_ids) > 36200:
            print(f"WARN! {field['pk']} observed out of order, ignoring",
                  "\n", design_ids)
        continue

    lastObserved = np.max(exposures)

    # nexp is cadence nexp, an array
    expCount = [np.sum(field["nexp"][:i+1]) for i in range(len(field["nexp"]))]

    # exposure is 0 indexed, so the first exposure of an epoch will
    # have exposure number equal to the sum of previous epochs
    # so design.exposure will be >= sum(previous epochs) for all
    # designs in an epoch
    current_epoch = np.where(np.array(expCount) > lastObserved)[0][0]

    if current_epoch == 0:
        exp_start = 0
    else:
        exp_start = expCount[current_epoch - 1]

    if current_epoch - 1 == len(expCount):
        exp_end = expCount[-1]
    else:
        exp_end = expCount[current_epoch]

    idxs = np.where(np.logical_and(exposures >= exp_start, exposures < exp_end))

    # make sure we got through the whole epoch
    # otherwise the unique status catch below will let partial
    # epochs slide
    all_present = len(design_ids[idxs]) == field["nexp"][current_epoch]

    epoch_statuses = np.array(statuses)[idxs]
    if len(np.unique(epoch_statuses)) == 1 and all_present:
        # only one status, is it "done?"
        if np.unique(epoch_statuses) == int(doneStatus):
            # cool this epoch is actually finished
            continue
    else:
        last_design = design_ids[idxs][0] + field["nexp"][current_epoch] - 1
        last_status = getDesignStatus(last_design)
        if last_status == "done":
            # epoch finished early, it's all good.
            continue

    minTime = np.min(times[idxs])
    maxTime = np.max(times[idxs])
    maxTime = np.max([maxTime, now])

    if (maxTime - minTime).days >= field["max_length"][current_epoch]:
        these_statuses = np.unique(np.array(statuses)[idxs])
        if len(these_statuses) == 1:
            if these_statuses == int(notStartedStatus):
                continue
        demote_ids = design_ids[idxs]
        # cad = Cadence.select().join(Field).where(Field.pk == field['pk'])
        # statuses = DesignToStatus.select().where(DesignToStatus.design_id << list(demote_ids))
        # print(cad[0].label, cad[0].max_length)
        # print(demote_ids, minTime, maxTime)
        # print([s.completion_status_pk for s in statuses])
        # print(exposures[idxs], "\n")
        # sadStatus = CompletionStatus.get(label="not started").pk
        strIds = ", ".join([str(d) for d in demote_ids])
        print(f"marking design(s) {strIds} not started")
        DesignToStatus.update(status=notStartedStatus)\
                      .where(DesignToStatus.design_id << list(demote_ids)).execute()
